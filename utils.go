package main

import (
	"fmt"
	"github.com/equinox-io/equinox"
)

// assigned when creating a new application in the dashboard
const appID = "app_89L1xne6sL5"

// public portion of signing key generated by `equinox genkey`
var publicKey = []byte(`
-----BEGIN ECDSA PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE62fHuaSP1asZmQ8ikYysNB2VxKd8cV5i
G6WZ7PPD9DKAGoebHzm1D/uT2VEWxtgoZvEkbyhGgBbU5z/aDwIa7YNAIZrrRakV
PTvTEyFY2QbNu96tBlVM78N7Rq2HI8nN
-----END ECDSA PUBLIC KEY-----
`)

func equinoxUpdate() (error, bool) {
  opts := equinox.Options{Channel: "stable"}
  if err := opts.SetPublicKeyPEM(publicKey); err != nil {
    return err, false
  }

  // check for the update
  resp, err := equinox.Check(appID, opts)
  switch {
  case err == equinox.NotAvailableErr:
    fmt.Println("No update available, already at the latest version!")
    return nil, false
  case err != nil:
    fmt.Println("Update failed:", err)
    return err, false
  }
 
  // fetch the update and apply it
  err = resp.Apply()
  if err != nil {
    return err, false
  }

  fmt.Printf("Updated to new version: %s!\n", resp.ReleaseVersion)
  return nil, true
}

func checkErr(err error) bool {
	if err != nil {
		fmt.Printf("Error: %s\n", err.Error())
	}
	return err != nil
}